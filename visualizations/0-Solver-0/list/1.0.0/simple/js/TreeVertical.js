	var BaseUrl ="https://mycomposer.whenhub.co:8000/visualizations/0-Solver-0/list/1.0.0/";	var ApiCles ="AIzaSyCak-tvVOLU8Pj73bT1Hl2hNU4PH3PXaqY";		var _Events,		_Option,		_rootEvent, 		 CurrentEvent;	var _theme;		//color = d3.scale.category20c();	function getIdByName(n){	var id;		for (var i = 0; i < _Events.length; i++) {			if(n===_Events[i].name){				id = _Events[i].id;				break;				}			}		return id;	}	function Sheet(name,tag) {		this.name = name;		this.tag = tag;	}		function Node(name,tag) {		var sheet = new Sheet(name,tag);		this.name = sheet.name;		this.tag = sheet.tag;		this.children = [];	}	function Tree(data) {		var node = new Node(data,"");		this._root = node;	}	var RootAllEvent ;	var _handlers;		var InitTreeVisualisation = (function (_data, _options, selectedTheme, handlers) {		_Events= _data;		console.log(_data);		_Option= _options;		_theme= selectedTheme;		_handlers = handlers;		RootAllEvent = InitTreeVisu(_Events);		TreeVisualisation(0);		d3.select("#itemList").style("background-color",selectedTheme['dark']);		d3.select(".wrap").style("background-color",selectedTheme['light']);				for(var i = 0; i<RootAllEvent._root.children.length;i++){			$("ul.dates").append("<li id='' Pos="+i+">"				+RootAllEvent._root.children[i].name+			"</li>");		}	 });			 var ManageThemes= (function () { 	var size = Object.keys(_theme).length -1;	var tname = Object.keys(_theme)[Math.floor((Math.random() * size) + 2) ]	var t= _theme[tname];	return t;});var TreeVisualisation = (function (index) { 	var i = 0,		duration = 750,		root;	var containerWidth=0,		containerheight=0;		CurrentEvent =_Events[index];			containerWidth= d3.select("#itemList").style('width').replace("px","");	containerheight= d3.select("#itemList").style('height').replace("px","");		// ###################################Clear area 	d3.select("#itemList").html("");		var divTooltip =  d3.select('#ContainerItem')						.append('div') 						.attr('class', 'tooltip')               						.style('opacity', 0);		var svg = d3.select("#itemList")		.append("svg")		.attr("width", "100%")		.attr("height", "100%")			.append("g")			.attr("transform", "translate(" +10 + "," + 10+ ")");				// create img 	var defs =svg.append("defs");		var _rootEvent = new Tree("");			_rootEvent._root = RootAllEvent._root.children[index];	console.log(index);		console.log(_rootEvent);		if(_Option.showImage){			for (var i = 0; i < _Events.length; i++) {				var pattern = defs.append("pattern");					pattern.attr("id", "Id-"+_Events[i].name.substring(1,10).replace(/\s+/g,"_"))					   .attr("x", 0)					   .attr("y", 0)					   .attr("patternContentUnits", "objectBoundingBox")					   .attr("preserveAspectRatio", "none") 					   .attr("xmlns:xlink",  "http://www.w3.org/1999/xhtml") 					   .attr("height", "100%")					   .attr("width", "100%");				if(_Events[i].image){					pattern.append("svg:image")							.attr("xlink:href",_Events[i].image)							.attr("x", 0)							.attr("y", 0)							.attr("height", 1)							.attr("width", 1);				}else{					pattern.append("svg:image")							.attr("xlink:href",BaseUrl+"images/screens/lists-simple-overview.png")							.attr("x", 0)							.attr("y", 0)							.attr("height", 1)							.attr("width", 1);				}			}	}	var tree = d3.layout.tree()		.size([containerheight, containerWidth]);	var diagonal = d3.svg.diagonal()		.projection(function(d) { return [d.y, d.x]; });		root = _rootEvent._root;	root.x0 = (containerheight / 2);	root.y0 = 0;	function collapse(d) {		if (d.children) {			d._children = d.children;			d._children.forEach(collapse);			d.children = null;		}	}	root.children.forEach(collapse);	ReDraw(root);		//   https://composer.whenhub.com/	function ReDraw(source)  { 	// Compute the new tree layout.		  var nodes = tree.nodes(root).reverse(),			  links = tree.links(nodes);				//console.log(nodes);				  // Normalize for fixed-depth.		  nodes.forEach(function(d) { d.y =  d.depth * 100;}); //  250		  // Update the nodes…		  var node = svg.selectAll("g.node")			  .data(nodes, function(d) { return d.id || (d.id = ++i); });		  // Enter any new nodes at the parent's previous position.		  var nodeEnter = node.enter().append("g")			  .attr("class", "node")			  .attr("transform", function(d) {return "translate(" + source.y0 + "," + source.x0 + ")";  })			  .on("click", click);		  nodeEnter.append("circle")			  .attr("r", function(d) { 				if(d.depth===0){					return 5 ; 				}else if(d.tag==="Name"){					return 30; 				}else{					return d._children ?  20 : 10;					}				})//1e-6  			   .attr("class",function(d) { 					if(d.tag==="details-link")						return "details-link";					else						return "";				})			   .attr("data-id", function(d) {					if(d.tag==="details-link")						return d.name; 					else						return "";				})			  .attr("id", function(d) { return "dp-"+d.depth; })			  .attr("fill", function(d,i) { 				  if(d.tag==="Name"){						return  "url(#Id-"+d.name.substring(1,10).replace(/\s+/g,"_")+")";					}else{						return ManageThemes();					}				})				.on('mouseover', function(d) { 					if(d.tag==="details-link") return;					if(d.depth===0){ return;}					var _html="";					if(d.tag==="Geolocation"){						_html= '<h3>' + d.tag + '</h3>' + '<p>' + d.name + '</p><p><img src="'+BaseUrl+'images/screens/map.png"></img></p>';					}else{						_html = '<h3>' + d.tag + '</h3>' + '<p>' + d.name + '</p>';					}					divTooltip.transition()        						.duration(200)      						.style('opacity', .9);      					divTooltip.html(_html)  					.style('right','50px')     					.style('top', '10px');    					})                  				.on('mouseout', function(d) {       					divTooltip.transition()        						.duration(500)      						.style('opacity', 0);   				}).on('click', function(d){					if(d.tag==="details-link"){						_handlers.showDetail(d.name);					}								});			  		  nodeEnter.append("text")			  .attr("x", function(d) { return d.children || d._children ? -20 : 20; })			  .attr("dy",function(d) { return d.children || d._children ? "-.05em" :".35em"; })			  .attr("text-anchor", function(d) { return d.children || d._children ? "end" : "start"; })			  .attr("txt", function(d) { 					if(d.tag==="details-link")						return "Click Detail";					else						return d.name;					})				 .attr("class",function(d) { 					if(d.tag==="details-link")						return "details-link";					else						return "";				})			   .attr("data-id", function(d) {					if(d.tag==="details-link")						return d.name; 					else						return "";				})			  .text(function(d) { 				if(d.tag==="details-link")						return "Click Detail";					else						return (d.name.length > 10 ) ? d.name.substring(0, 7)+'...' : d.name;				 })			  .style("fill-opacity", 1e-6 )			  .style("fill", "#fffcfc");		  // Transition nodes to their new position.		  var nodeUpdate = node.transition()			  .duration(duration)			  .attr("transform", function(d) {return "translate(" + d.y + "," + d.x + ")";});		  nodeUpdate.select("circle")			  .attr("r", function(d) { 				if(d.depth===0){					return 5 ; 				}else if(d.tag==="Name"){					return 20; 				}else{					return d._children ?  20 : 10;					}				});		  nodeUpdate.select("text")			  .style("fill-opacity", 1);		  // Transition exiting nodes to the parent's new position.		  var nodeExit = node.exit().transition()			  .duration(duration)			  .attr("transform", function(d) {return "translate(" + source.y + "," + source.x + ")";})			  .remove();		  nodeExit.select("circle")			.attr("r", function(d) { 				if(d.depth===0){					return 5 ; 				}else if(d.tag==="Name"){					return 20; 				}else{					return d._children ? 20 : 10;					}				});		  		  nodeExit.select("text")			  .style("fill-opacity", 1e-6);				  // Update the links…		  var link = svg.selectAll("path.link")			  .data(links, function(d) { return d.target.id; });		  // Enter any new links at the parent's previous position.		  link.enter().insert("path", "g")			  .attr("class", "link")			  .attr("d", function(d) {				var o = {x: source.x0, y: source.y0};				return diagonal({source: o, target: o});			  });		  // Transition links to their new position.		  link.transition()			  .duration(duration)			  .attr("d", diagonal);		  // Transition exiting nodes to the parent's new position.		  link.exit().transition()			  .duration(duration)			  .attr("d", function(d) {				var o = {x: source.x, y: source.y};				return diagonal({source: o, target: o});			  })			  .remove();		  // Stash the old positions for transition.		  nodes.forEach(function(d) {			d.x0 = d.x;			d.y0 = d.y;		  }); 	}	// Toggle children on click.	function click(d) {		if (d.children) {			d._children = d.children;			d.children = null;		} else {			d.children = d._children;			d._children = null;		}		ReDraw(d);	}	});var InitTreeVisu = (function (_Events) {var _rootEventGroup = new Tree("Root");	var PrevYear;	function InitTree(CurEvent){	var YearAdd=0;	var MonthAdd=0;		var CurYear;	var CurMonth;	var CurEvent;	var _Year = d3.time.format('%Y')(new Date(CurEvent.date));				if(_Year === "0NaN"){		_Year = d3.time.format('%Y')(new Date(CurEvent.when.startDate));	}	CurYear =_Year;		var _Month = d3.time.format('%m')(new Date(CurEvent.date));				if(_Month === "NaN"){		_Month = d3.time.format('%m')(new Date(CurEvent.when.startDate));	}	CurMonth=_Month;	var nLen=0;	if(_rootEventGroup._root.children.length >0){				if(PrevYear != CurYear){			_rootEventGroup._root.children.push(new Node(CurYear,"Year"));			var yLen= _rootEventGroup._root.children.length-1;			PrevYear = CurYear;						YearAdd=1;			if(CurMonth){				var Exist =0;				var index;					for (var j =0; j< _rootEventGroup._root.children[yLen].children.length ; j++){						if(CurMonth === _rootEventGroup._root.children[yLen].children[j].name){							Exist=1;							index=j;							break;						}					}					if(Exist){						var nLen=0;						if(CurEvent.name){							_rootEventGroup._root.children[yLen].children[index].children.push(new Node(CurEvent.name,"Name"));							nLen = _rootEventGroup._root.children[yLen].children[index].children.length -1;							_rootEventGroup._root.children[yLen].children[index].children.push(new Sheet(CurEvent.id,"details-link"));						}						if(CurEvent.description){							_rootEventGroup._root.children[yLen].children[index].children[nLen].children.push(new Sheet(CurEvent.description,"Description"));						}												if(CurEvent.when.endDate){							_rootEventGroup._root.children[yLen].children[index].children[nLen].children.push(new Sheet(CurEvent.when.endDate, "Date End"));						}						if(CurEvent.location){							_rootEventGroup._root.children[yLen].children[index].children[nLen].children.push(new Node("geo","Location"));														var indexLocation = _rootEventGroup._root.children[yLen].children[index].children[nLen].children.length -1;													if(CurEvent.location.country){									_rootEventGroup._root.children[yLen].children[index].children[nLen].children[indexLocation].children.										push(new Sheet(CurEvent.location.country,"Country"));							}							if(CurEvent.location.address){								_rootEventGroup._root.children[yLen].children[index].children[nLen].children[indexLocation].children.									push(new Sheet(CurEvent.location.address,"Adresse"));							}							if(CurEvent.location.city || CurEvent.location.name ){								if(CurEvent.location.city)									_rootEventGroup._root.children[yLen].children[index].children[nLen].children[indexLocation].													children.push(new Sheet(CurEvent.location.city,"City"));								else									_rootEventGroup._root.children[yLen].children[index].children[nLen].children[indexLocation].children.										push(new Sheet(CurEvent.location.name,"City Name"));							}									if( CurEvent.location.streetName || CurEvent.location.streetNumber){								_rootEventGroup._root.children[yLen].children[index].children[nLen].children[indexLocation].children.									push(new Sheet(CurEvent.location.streetName+":"+													CurEvent.location.streetNumber,"Street Number"));										}							if(CurEvent.location.region){								_rootEventGroup._root.children[yLen].children[index].children[nLen].children[indexLocation].children.									push(new Sheet(CurEvent.location.region, "Region"));							}							if(CurEvent.location.geolocation){								_rootEventGroup._root.children[yLen].children[index].children[nLen].children[indexLocation].children.									push(new Sheet(									"{lat:"+CurEvent.location.geolocation.lat+",lng:"+ CurEvent.location.geolocation.lng+"}", "Geolocation"));							}						}					}else{						_rootEventGroup._root.children[yLen].children.push(new Node(CurMonth,"Month"));						var mLen= _rootEventGroup._root.children[yLen].children.length -1;						if(CurEvent.name){							_rootEventGroup._root.children[yLen].children[mLen].children.push(new Node(CurEvent.name,"Name"));							nLen = _rootEventGroup._root.children[yLen].children[mLen].children.length -1;							_rootEventGroup._root.children[yLen].children[mLen].children.push(new Sheet(CurEvent.id,"details-link"));													}						if(CurEvent.description){							_rootEventGroup._root.children[yLen].children[mLen].children[nLen].children.push(new Sheet(CurEvent.description,"Description"));						}												if(CurEvent.when.endDate){							_rootEventGroup._root.children[yLen].children[mLen].children[nLen].children.push(new Sheet(CurEvent.when.endDate, "Date End"));						}						if(CurEvent.location){							_rootEventGroup._root.children[yLen].children[mLen].children[nLen].children.push(new Node("geo","Location"));							var indexLocation = _rootEventGroup._root.children[yLen].children[mLen].children[nLen].children.length -1;													if(CurEvent.location.country){									_rootEventGroup._root.children[yLen].children[mLen].children[nLen].children[indexLocation].children.										push(new Sheet(CurEvent.location.country,"Country"));							}							if(CurEvent.location.address){								_rootEventGroup._root.children[yLen].children[mLen].children[nLen].children[indexLocation].children.									push(new Sheet(CurEvent.location.address,"Adresse"));							}							if(CurEvent.location.city || CurEvent.location.name ){								if(CurEvent.location.city)									_rootEventGroup._root.children[yLen].children[mLen].children[nLen].children[indexLocation].													children.push(new Sheet(CurEvent.location.city,"City"));								else									_rootEventGroup._root.children[yLen].children[mLen].children[nLen].children[indexLocation].children.										push(new Sheet(CurEvent.location.name,"City Name"));							}									if( CurEvent.location.streetName || CurEvent.location.streetNumber){								_rootEventGroup._root.children[yLen].children[mLen].children[nLen].children[indexLocation].children.									push(new Sheet(CurEvent.location.streetName+":"+													CurEvent.location.streetNumber,"Street Number"));										}							if(CurEvent.location.region){								_rootEventGroup._root.children[yLen].children[mLen].children[nLen].children[indexLocation].children.									push(new Sheet(CurEvent.location.region, "Region"));							}							if(CurEvent.location.geolocation){								_rootEventGroup._root.children[yLen].children[mLen].children[nLen].children[indexLocation].children.									push(new Sheet(									"{lat:"+CurEvent.location.geolocation.lat+",lng:"+ CurEvent.location.geolocation.lng+"}", "Geolocation"));							}						}					}			}		}else{			var yLen= _rootEventGroup._root.children.length-1;				PrevYear = CurYear;							YearAdd=1;				if(CurMonth){					var Exist =0;					var index =-1;						for(var i =0; i<_rootEventGroup._root.children[yLen].children.length; i++){							if(CurMonth === _rootEventGroup._root.children[yLen].children[i].name){								Exist=1;								index=i;								break;							}						}						if(Exist){							if(CurEvent.name){								_rootEventGroup._root.children[yLen].children[index].children.push(new Node(CurEvent.name,"Name"));								nLen = _rootEventGroup._root.children[yLen].children[index].children.length -1;								_rootEventGroup._root.children[yLen].children[index].children.push(new Sheet(CurEvent.id,"details-link"));															}							if(CurEvent.description){							_rootEventGroup._root.children[yLen].children[index].children[nLen].children.push(new Sheet(CurEvent.description,"Description"));							}													if(CurEvent.when.endDate){								_rootEventGroup._root.children[yLen].children[index].children[nLen].children.push(new Sheet(CurEvent.when.endDate, "Date End"));							}							if(CurEvent.location){							_rootEventGroup._root.children[yLen].children[index].children[nLen].children.push(new Node("geo","Location"));							var indexLocation = _rootEventGroup._root.children[yLen].children[index].children[nLen].children.length -1;													if(CurEvent.location.country){									_rootEventGroup._root.children[yLen].children[index].children[nLen].children[indexLocation].children.										push(new Sheet(CurEvent.location.country,"Country"));							}							if(CurEvent.location.address){								_rootEventGroup._root.children[yLen].children[index].children[nLen].children[indexLocation].children.									push(new Sheet(CurEvent.location.address,"Adresse"));							}							if(CurEvent.location.city || CurEvent.location.name ){								if(CurEvent.location.city)									_rootEventGroup._root.children[yLen].children[index].children[nLen].children[indexLocation].													children.push(new Sheet(CurEvent.location.city,"City"));								else									_rootEventGroup._root.children[yLen].children[index].children[nLen].children[indexLocation].children.										push(new Sheet(CurEvent.location.name,"City Name"));							}									if( CurEvent.location.streetName || CurEvent.location.streetNumber){								_rootEventGroup._root.children[yLen].children[index].children[nLen].children[indexLocation].children.									push(new Sheet(CurEvent.location.streetName+":"+													CurEvent.location.streetNumber,"Street Number"));										}							if(CurEvent.location.region){								_rootEventGroup._root.children[yLen].children[index].children[nLen].children[indexLocation].children.									push(new Sheet(CurEvent.location.region, "Region"));							}							if(CurEvent.location.geolocation){								_rootEventGroup._root.children[yLen].children[index].children[nLen].children[indexLocation].children.									push(new Sheet(									"{lat:"+CurEvent.location.geolocation.lat+",lng:"+ CurEvent.location.geolocation.lng+"}", "Geolocation"));							}						}						}else{							_rootEventGroup._root.children[yLen].children.push(new Node(CurMonth,"Month"));							var mLen= _rootEventGroup._root.children[yLen].children.length -1;							if(CurEvent.name){								_rootEventGroup._root.children[yLen].children[mLen].children.push(new Node(CurEvent.name,"Name"));								nLen = _rootEventGroup._root.children[yLen].children[mLen].children.length -1;								_rootEventGroup._root.children[yLen].children[mLen].children.push(new Sheet(CurEvent.id,"details-link"));															}							if(CurEvent.description){							_rootEventGroup._root.children[yLen].children[mLen].children[nLen].children.push(new Sheet(CurEvent.description,"Description"));							}													if(CurEvent.when.endDate){								_rootEventGroup._root.children[yLen].children[mLen].children[nLen].children.push(new Sheet(CurEvent.when.endDate, "Date End"));							}							if(CurEvent.location){							// pointeur							_rootEventGroup._root.children[yLen].children[mLen].children[nLen].children.push(new Node("geo","Location"));							var indexLocation = _rootEventGroup._root.children[yLen].children[mLen].children[nLen].children.length -1;													if(CurEvent.location.country){									_rootEventGroup._root.children[yLen].children[mLen].children[nLen].children[indexLocation].children.										push(new Sheet(CurEvent.location.country,"Country"));							}							if(CurEvent.location.address){								_rootEventGroup._root.children[yLen].children[mLen].children[nLen].children[indexLocation].children.									push(new Sheet(CurEvent.location.address,"Adresse"));							}							if(CurEvent.location.city || CurEvent.location.name ){								if(CurEvent.location.city)									_rootEventGroup._root.children[yLen].children[mLen].children[nLen].children[indexLocation].													children.push(new Sheet(CurEvent.location.city,"City"));								else									_rootEventGroup._root.children[yLen].children[mLen].children[nLen].children[indexLocation].children.										push(new Sheet(CurEvent.location.name,"City Name"));							}									if( CurEvent.location.streetName || CurEvent.location.streetNumber){								_rootEventGroup._root.children[yLen].children[mLen].children[nLen].children[indexLocation].children.									push(new Sheet(CurEvent.location.streetName+":"+													CurEvent.location.streetNumber,"Street Number"));										}							if(CurEvent.location.region){								_rootEventGroup._root.children[yLen].children[mLen].children[nLen].children[indexLocation].children.									push(new Sheet(CurEvent.location.region, "Region"));							}							if(CurEvent.location.geolocation){								_rootEventGroup._root.children[yLen].children[mLen].children[nLen].children[indexLocation].children.									push(new Sheet(									"{lat:"+CurEvent.location.geolocation.lat+",lng:"+ CurEvent.location.geolocation.lng+"}", "Geolocation"));							}						}												}				}		}		}else{		console.log(CurEvent.when.startDate);		console.log(CurEvent.Date);		_rootEventGroup._root.children.push(new Node(CurYear,"Year"));		PrevYear = CurYear;					YearAdd=1;				if(CurMonth){			_rootEventGroup._root.children[0].children.push(new Node(CurMonth,"Month"));			PrevMonth = CurMonth;									if(CurEvent.name){				_rootEventGroup._root.children[0].children[0].children.push(new Node(CurEvent.name,"Name"));				_rootEventGroup._root.children[0].children[0].children.push(new Sheet(CurEvent.id,"details-link"));			}			if(CurEvent.description){				_rootEventGroup._root.children[0].children[0].children[0].children.push(new Sheet(CurEvent.description,"Description"));				}										if(CurEvent.when.endDate){					_rootEventGroup._root.children[0].children[0].children[0].children.push(new Sheet(CurEvent.when.endDate, "Date End"));				}				if(CurEvent.location){				// pointeur				_rootEventGroup._root.children[0].children[0].children[0].children.push(new Node("geo","Location"));				var indexLocation = _rootEventGroup._root.children[0].children[0].children[0].children.length -1;							if(CurEvent.location.country){						_rootEventGroup._root.children[0].children[0].children[0].children[indexLocation].children.							push(new Sheet(CurEvent.location.country,"Country"));				}				if(CurEvent.location.address){					_rootEventGroup._root.children[0].children[0].children[0].children[indexLocation].children.						push(new Sheet(CurEvent.location.address,"Adresse"));				}				if(CurEvent.location.city || CurEvent.location.name ){					if(CurEvent.location.city)						_rootEventGroup._root.children[0].children[0].children[0].children[indexLocation].										children.push(new Sheet(CurEvent.location.city,"City"));					else						_rootEventGroup._root.children[0].children[0].children[0].children[indexLocation].children.							push(new Sheet(CurEvent.location.name,"City Name"));				}						if( CurEvent.location.streetName || CurEvent.location.streetNumber){					_rootEventGroup._root.children[0].children[0].children[0].children[indexLocation].children.						push(new Sheet(CurEvent.location.streetName+":"+										CurEvent.location.streetNumber,"Street Number"));							}				if(CurEvent.location.region){					_rootEventGroup._root.children[0].children[0].children[0].children[indexLocation].children.						push(new Sheet(CurEvent.location.region, "Region"));				}				if(CurEvent.location.geolocation){					_rootEventGroup._root.children[0].children[0].children[0].children[indexLocation].children.						push(new Sheet(						"{lat:"+CurEvent.location.geolocation.lat+",lng:"+ CurEvent.location.geolocation.lng+"}", "Geolocation"));				}			}		}else{			if(CurEvent.name){				_rootEventGroup._root.children[0].children.push(new Node(CurEvent.name,"Name"));				nLen = _rootEventGroup._root.children[0].children.length -1;				_rootEventGroup._root.children[0].children.push(new Sheet(CurEvent.id,"details-link"));			}			if(CurEvent.description){				_rootEventGroup._root.children[0].children[nLen].children.push(new Sheet(CurEvent.description,"Description"));				}										if(CurEvent.when.endDate){					_rootEventGroup._root.children[0].children[nLen].children.push(new Sheet(CurEvent.when.endDate, "Date End"));				}				if(CurEvent.location){				// pointeur				_rootEventGroup._root.children[0].children[nLen].children.push(new Node("geo","Location"));				var indexLocation = _rootEventGroup._root.children[0].children[nLen].children[0].children.length -1;							if(CurEvent.location.country){						_rootEventGroup._root.children[0].children[nLen].children[indexLocation].children.							push(new Sheet(CurEvent.location.country,"Country"));				}				if(CurEvent.location.address){					_rootEventGroup._root.children[0].children[nLen].children[indexLocation].children.						push(new Sheet(CurEvent.location.address,"Adresse"));				}				if(CurEvent.location.city || CurEvent.location.name ){					if(CurEvent.location.city)						_rootEventGroup._root.children[0].children[nLen].children[indexLocation].										children.push(new Sheet(CurEvent.location.city,"City"));					else						_rootEventGroup._root.children[0].children[nLen].children[indexLocation].children.							push(new Sheet(CurEvent.location.name,"City Name"));				}						if( CurEvent.location.streetName || CurEvent.location.streetNumber){					_rootEventGroup._root.children[0].children[nLen].children[indexLocation].children.						push(new Sheet(CurEvent.location.streetName+":"+										CurEvent.location.streetNumber,"Street Number"));							}				if(CurEvent.location.region){					_rootEventGroup._root.children[0].children[nLen].children[indexLocation].children.						push(new Sheet(CurEvent.location.region, "Region"));				}				if(CurEvent.location.geolocation){					_rootEventGroup._root.children[0].children[nLen].children[indexLocation].children.						push(new Sheet(						"{lat:"+CurEvent.location.geolocation.lat+",lng:"+ CurEvent.location.geolocation.lng+"}", "Geolocation"));				}			}		}	}}	for (var i = 0; i < _Events.length; i++) {		InitTree(_Events[i]);			}return _rootEventGroup;});/* var sorted = events.sort(function(a, b){    var dateA=new Date(a.date), dateB=new Date(b.date)    return dateA-dateB //sort by date ascending}) */